Ensimag 2A POO - TP 2014/15
============================

Groupe :
- BACKENSTRASS Thibaud, 2A SLE
- MOUSSU Robin, 2A SLE
- SAMBATH Amanda, 2A SLE


Ce qui est rendu :
------------------

- src: contient les classes du programme
Leur description à été faite dans à l'aide de javadoc. La javadoc est
disponible dans le dossier javadoc/

- cartes: quelques exemples de fichiers de données

- images: répertoire contenant les images nécessaires à l'affichage de
  l'interface graphique

- bin: répertoire de compilation, contient les classes de l'interface graphique

- test: les classes de test et les tests unitaires réalisés sur
        l'algorithme du plus court chemin avec Junit


Etat du projet :
----------------

Le sujet a pu être traité en grande partie. Les robots se déplacent et vont
éteindre les incendies en utilisant l'algorithme Astar pour trouver le plus
court chemin. Cependant, la simulation n'inclue pas l'aspect temporel : les
déplacements, vidange et remplissage s'effectuent "instantanément".

La validation des classes a été faite au fur et à mesure de leur développement
en utilisant des classes de tests pour les plus simples, des tests unitaires
pour les plus complexes (algorithme du plus court chemin). Ces tests unitaires
ont été effectués grâce à Junit. Les programmes de tests peuvent être trouvés
dans le répertoire test/. Pour plus de détails, consulter le rapport contenant
les choix de conception et les résultats et tests réalisés.

Comment executer le projet :
----------------------------

Il est conseillé de faire un `make clean` prélablement.

`make` ou `make all`
Compile le projet, puis lance tous les tests, puis lance la simulation pour les
quatres cartes fournies les unes après les autres.

`make exeAfficheSimulation`
Compile le projet puis lance la simulation pour les quatres cartes fournies les
unes après les autres.

`make exeTest`
Execute tout les tests.

`make clean`
Nettoie le repertoire de compilation et supprime tous les fichiers *.class

D'autres cibles sont présentes dans le makefile pour ne lancer la simulation
que sur une seule carte, où encore pour ne faire que la compilation.

Javadoc :
---------

La javadoc est disponible dans le dossier javadoc. Vous pouvez la lire à l'aide
de tout navigateur internet. Par exemple `firefox javadoc/index.html`

Les classes principales du projet sont :

- AfficheSimulation :
  La classe principale du projet

- Manager et ses classes filles ManagerDynamique, ManagerScenario0 et
  managerscenario1 :
  Les classes qui s'occupent de la stratégie des robots. ManagerDynamique est
  la classe actuellement utilisée. Elle décide dynamiquement des actions à
  effectuer en fonction de l'état actuel de la carte. (l'apparition d'un feu
  serait pris en compte). Ces stratégies sont définie dans les classes filles
  de la classe Managed.

- Robot et ses classes-filles RobotChenilles, RobotDrone, RobotPattes, et
  RobotRoues :
  Les différents robots de la simulations.

- Managed et ses classes enfants DoNothing, EteindreIncendie et ChercheEau :
  Les classes qui sont chargés de l'implantation concrète des stratégies.

- Carte, Incendie, Direction, NatureTerrain et Case :
  La réprésentation de la carte. et les imformations de base.

- Astar, ValideCase :
  Implantation de l'algorithme de recherche de plus court chemin.

- SimulationException, ConstructionException :
  Les exceptions générés par la simulation.

- Date, Simulateur :
  Gestion de la simulations.

- Evenement, EventMoveRobot, EventRemplirRobot, EventViderRobot :
  Les évènements qui peuvent être utilisés dans la simulation (partiellement
  implémenté)

- LecteurDonnees :
  Extraction des données en provenance des fichiers .map



