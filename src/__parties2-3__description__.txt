# TRAVAIL D'AMANDA
abstract class Evenement
    // CHANGEMENT D'IMPLEMENTATION : ajout de dateDebExe
    attribut dateDebExe
    attribut dateFinExe
Concrétisée en trois classes-filles de constructeurs :
 - deplacerRobot(Date d, Robot r, Direction dir, Carte c);
 - remplirRobot(Date d, Robot r, Carte c);
 - viderRobot(Date d, Robot r, int nbInterventionsUnitaires, DonneesSimulation data)
 // La Date d correspond à la date de début d'éxecution
 // La Date de fin d'exe est calculé dans les trois classe-filles selon le robot passé dans le cnstructeur
 // Afin de "vérouiller" un robot pendant qu'il exécute un évenement, on met la date de fin d'exe dans la date de début pour l'évènement suivant.

class Date
    méthodes incrementDate() et getDate();
    => stocker la date en long plutot qu'en int

class Simulateur
    attributs : liste ordonnée d'événements (en propre, COMPOSITION) -> collection PriorityQueue, la classe Evenement possède une méthode de comparaison et implémente l'interface Comparable<Evenement>
                                                                    ET ajout d'une classe ComparateurEvenement qui implémente Comparator<Evenement> et qui est indiquée à la création de la PriorityQueue
                date courante
                manager (pour appel à manage())
    méthodes : ajoutEvenement(Evenement e)
               incrementeDate(), qui fait 1. l'incrémentation de l'objet date
                                          2. exécution des événements dans l'ordre de la liste avec MAJ de la liste
                                            // Un événement est exécuté à sa date de FIN
                                            // ex.: un robot met 4 tics à se déplacer, le déplacement effectif sera à t+4
                                          3. appel à la méthode manage() du manager
                                            // L'appel à manage() doit se faire après la MAJ des DonneesSimulation faite à l'exécution des événements
               simulationTerminee(), qui renvoie un boolean si la file est vide

    /!\ Le changement de la position du robot (méthode robot.deplacer(Case c)) doit être fait à la FIN du temps de déplacement effectif

abstract class Manager
    attributs : Simulateur, pour appel à ajoutEvenement(e)
                DonneesSimulation
    méthodes : manage(), qui fait : 1. décision des événements
                                    2. créer les événements associés
                                    3. ajouter les événements à la liste du simulateur par simulateur.ajoutEvenement(e)

/!\ AMANDA réalise la classe abstraite Manager, ainsi que deux classes concrètes Manager pour les tests de la question 2.



## TRAVAIL DE ROBIN
Créer un manager qui ne connaît QUE le simulateur et les DonneesSimulation à la date courante (TOUTES, pas seulement les modifiées)
Le manager doit créer les événements associés aux ordres ET verrouiller les robots pendant le temps nécessaire à l'exécution de leur déplacement.
Ce temps doit par ailleurs être spécifié lors de la création d'un événement, comme dateFinExection

temps = getDateCourante() + tailleCase / robot.getVitesse(NatureTerrain)

Ainsi, si un robot met 4 tics d'horloge à aller de la case C à C', l'ordre est créé (événement ajouté à la file) à t=0 avec datFinExecution=4 et le
manager verrouille "en interne" le robot en question pour ne plus donner d'ordre le concernant jusqu'à t=4
`A t=4, si le déplacement a eu lieu, le manager le "sait" grâce aux DonneesSimulation, sinon (exception déplacement impossible), le robot n'aura pas bougé.
